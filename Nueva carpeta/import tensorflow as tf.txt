import tensorflow as tf
from tensorflow import keras
categorias = '/home/sebastian/.cache/kagglehub/datasets/nirmalsankalana/plant-diseases-training-dataset/versions/12/data'
datagen = keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255,  # Normalizar píxeles (0-255 a 0-1)
    validation_split=0.2,  # Usar 20% para validación
    # Opcional: aumentación de datos
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)
train_generator = datagen.flow_from_directory(
    categorias,
    target_size=(150, 150),  # Ajusta al tamaño esperado por tu modelo
    batch_size=32,
    class_mode='categorical',  # Para clasificación multiclase
    subset='training'  # Usar subconjunto de entrenamiento
)
# Generador para datos de validación
validation_generator = datagen.flow_from_directory(
    categorias,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    subset='validation'  # Usar subconjunto de validación
)
model = keras.Sequential([
    keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation='relu'),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(72, activation='softmax')  # Ajusta al número de clases
])
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
history = model.fit(
    train_generator,
    epochs=10,
    validation_data=validation_generator
)


modelo de entramiento de manos.

from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

classifier = Sequential()

classifier.add(Conv2D(filters = 32,kernel_size = (3, 3), 
                      input_shape = (64, 64, 3), activation = "relu"))

classifier.add(MaxPooling2D(pool_size = (2,2)))

classifier.add(Conv2D(filters = 32,kernel_size = (3, 3), activation = "relu"))
classifier.add(MaxPooling2D(pool_size = (2,2)))


classifier.add(Flatten())

classifier.add(Dense(units = 128, activation = "relu"))
classifier.add(Dense(units = 1, activation = "sigmoid"))


classifier.compile(optimizer = "adam", loss = "binary_crossentropy", metrics = ["accuracy"])


from tensorflow.keras.preprocessing.image import ImageDataGenerator


train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

training_dataset = train_datagen.flow_from_directory(
    r'C:\Users\juuna\anaconda3\envs\deeplearning-az\original\Part 2 - Convolutional Neural Networks (CNN)\dataset\training_set',
    target_size=(64, 64),
    batch_size=32,
    class_mode='binary'
)

testing_dataset = test_datagen.flow_from_directory(
    r'C:\Users\juuna\anaconda3\envs\deeplearning-az\original\Part 2 - Convolutional Neural Networks (CNN)\dataset\test_set',
    target_size=(64, 64),
    batch_size=32,
    class_mode='binary'
)


classifier.fit(training_dataset,
                        steps_per_epoch=8000,
                        epochs=25,
                        validation_data=testing_dataset,
                        validation_steps=2000)

history = classifier.fit(
    training_dataset,
    steps_per_epoch=250,  # ajusta según tus datos
    epochs=25,
    validation_data=testing_dataset,
    validation_steps=63
)

import matplotlib.pyplot as plt

# Graficar pérdida (loss)
plt.plot(history.history['loss'], label='Entrenamiento')
plt.plot(history.history['val_loss'], label='Validación')
plt.title('Pérdida durante el entrenamiento')
plt.xlabel('Época')
plt.ylabel('Pérdida')
plt.legend()
plt.show()

# Graficar precisión (accuracy)
plt.plot(history.history['accuracy'], label='Entrenamiento')
plt.plot(history.history['val_accuracy'], label='Validación')
plt.title('Precisión durante el entrenamiento')
plt.xlabel('Época')
plt.ylabel('Precisión')
plt.legend()
plt.show()


import numpy as np
from keras.preprocessing import image
test_image = image.load_img(r'C:\Users\juuna\anaconda3\envs\deeplearning-az\original\Part 2 - Convolutional Neural Networks (CNN)\dataset\single_prediction\cat_or_dog_2.jpg', target_size=(64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict(test_image)
training_dataset.class_indices
if result[0][0] == 1:
    prediction = 'dog'
else:
    prediction = 'cat'




